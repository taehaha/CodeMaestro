
###############################
# Stage 1: 빌드 단계 (builder)
###############################
FROM node:20-alpine as builder

# 빌드 시 필요한 환경 변수 ARG 선언
ARG OPENAI_API_KEY
ARG REACT_APP_FRONTEND_URL
ARG REACT_APP_BACKEND_URL
ARG REACT_APP_CONCURRENCY_BACKEND_URL
ARG REACT_APP_CONCURRENCY_BACKEND_WEBSOCKET_URL

# ARG 값을 ENV로 설정하여 빌드 도중 참조 가능하도록 함
ENV OPENAI_API_KEY=$OPENAI_API_KEY
ENV REACT_APP_FRONTEND_URL=$REACT_APP_FRONTEND_URL
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL
ENV REACT_APP_CONCURRENCY_BACKEND_URL=$REACT_APP_CONCURRENCY_BACKEND_URL
ENV REACT_APP_CONCURRENCY_BACKEND_WEBSOCKET_URL=$REACT_APP_CONCURRENCY_BACKEND_WEBSOCKET_URL

# 작업 디렉터리 설정
WORKDIR /app

# package.json, yarn.lock만 복사하여 캐시 활용
COPY package.json yarn.lock ./

# BuildKit 캐시 마운트를 활용하여 의존성 설치
RUN --mount=type=cache,target=/root/.cache/yarn \
    yarn install --frozen-lockfile

# 전체 소스 복사 (.dockerignore를 활용하여 불필요한 파일 제외 권장)
COPY . .

# 모노레포 루트에 정의된 전체 빌드 실행
RUN yarn build-all

# 프로덕션 실행에 필요 없는 devDependencies 제거
RUN yarn install --production --frozen-lockfile

###############################
# Stage 2: 최종 실행 단계 (runner)
###############################
FROM node:20-alpine

# 작업 디렉터리 설정
WORKDIR /app

# 빌드 단계에서 생성된 결과물 복사 (프로덕션용 node_modules 포함)
COPY --from=builder /app .

# 최종 실행 단계에서도 환경 변수 설정
ENV OPENAI_API_KEY=$OPENAI_API_KEY
ENV REACT_APP_FRONTEND_URL=$REACT_APP_FRONTEND_URL
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL
ENV REACT_APP_CONCURRENCY_BACKEND_URL=$REACT_APP_CONCURRENCY_BACKEND_URL
ENV REACT_APP_CONCURRENCY_BACKEND_WEBSOCKET_URL=$REACT_APP_CONCURRENCY_BACKEND_WEBSOCKET_URL

# Express 서버가 사용하는 포트 노출 (예: 3000, 3001)
EXPOSE 3000
EXPOSE 3001

# 컨테이너 시작 시 Express 서버 실행
CMD ["yarn", "start-server"]